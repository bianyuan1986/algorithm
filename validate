#!/usr/bin/python
#encoding=utf-8

import os, sys

rules = {
    'E': ['A'],
    'A': ['A+M', 'M'],
    'M': ['M*P', 'P'],
    'P': ['(E)', 'N'],
    'N': [str(i) for i in range(10)],
}

#st为要扫描的字符串
#target为终止状态，即最后的可接受状态
def back(st, target):
    reduced_sets = set()
	#cur为当前规约后的字符串，hist为记录的规约规则
    def _back(cur, hist, idx):
		print "----Enter _back----\n"
        print "cur:%s\n" % cur
        print "hist:%s\n" % hist
        print "idx:%d\n" % idx
        ans = []
        if cur in reduced_sets:
            return []
        reduced_sets.add(cur)
        hist.append(cur)
        if cur == target:
            ans.append(hist)
        #遍历字符串中每个字符
        for i in range(len(cur)):
			#从位置j向后扫描token，因为例子中的token都是单字符，所以此处实际省略了词法分析获取token的过程
            for j in range(max(i, idx), len(cur)):
				#读取已规约字符串，相当于栈中存在的字符串，j+1位置为lookahead token
                sub = cur[i:j+1]
				print "sub:%s\n" % sub
                #遍历每条规则
                for r in rules:
                    print "r:%s\n" % r
					#查找用于规约的规则，rr为规约规则
                    for rr in rules[r]:
						print "rules[r]:%s rr:%s\n" % (rules[r], rr)
                        work = False
                        if i == 0:
                            work = (work or rr[-(j-i+1):] == sub)
                        if j == len(cur) - 1:
							#当前栈中已规约字符串是rr规约规则的后缀，则可以进行规约
                            work = (work or rr[:(j-i+1)] == sub)
						#整个栈中的字符串被包含在某条规约规则中，相当于是一个完整语句中的中间片段，没有头部和尾部，只有整个字符串扫描完毕这种情况才成立，如果字符串还未扫描完，则包含情况不能规约，只有是后缀时才能规约。
                        if i == 0 and j == len(cur) - 1:
							#当前规约规则包含栈中
                            work = (work or (sub in rr))
						#规约规则右边字符串等于栈中字符串，可以规约
                        work = (work or (sub == rr))
                        if work:
							#cur中需要按照规约规则把规约后字符替换规则右边字符
                            vv = _back(
                                cur[:i] + r + cur[j+1:]
                                , hist + ['(%d, %d) %s => %s\n' % (i, j, r,
rr)], i + len(r) -1)
                            ans += vv
        return ans
    return _back(st, [], 0)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print "examples: "
        print "    %s '1+1)'" % sys.argv[0]
        sys.exit()
    s = sys.argv[1]
    vv = back(s, 'E')
    if vv:
        print s + ' is valid, it can be reduced to E'
        for i in vv:
            print '\t' + '\t'.join(map(str, i))
    else:
        print s + ' is invalid, and cannot be reduced to E'
